# Working with Altera Quartus and do proper versioning is not that easy
# but if you follow some rules it can be accomplished. :)
# This file should be placed into the main directory where the .qpf file is
# found. Generally Quartus throws all entities and so on in the main directory, but
# you can place all stuff also in separate folders. This approach is followed
# here. So when you create a new design create one or more folders where your
# entities will be located and put a .gitignore in there that overrides the
# ignores of this file, e.g. one single rule stating "!*" which allows now all
# type of files. When you add a MegaFunction or another entity to your design,
# simply add it to one of your private folders and Q2 will be happy and manage
# everything quite good. When you want to do versioning of your generated
# SOF/POF files, you can do this by redirecting the generated output to an own
# folder. To do this go to:
# "Assignments"
# -> "Settings
# -> "Compilation Process Settings"
# -> "Save project output files in specified directory"
# Now you can either place a .gitignore in the directory and allow the following
# list of types:
# !*.sof
# !*.pof
# or you create an own submodule in the folder to keep binary files out of your
# design.

# Need to keep all HDL files
# *.vhd
# *.v

# ignore Quartus generated files
*_generation_script*
*_inst.vhd
*.bak
*.cmp
*.done
*.eqn
*.hex
*.html
*.jdi
*.jpg
# *.mif
*.pin
*.ptf.*
*.qar
*.qarlog
*.qws
*.smsg
*.sopc_builder
*.tcl
*.txt # Explicitly add any text files used
*~
*example*
*sopc_*
filelist.txt
*.cdf
*.sld
*.qdf
*.CFG

# remove comment if one wishes to unkeep programming files versionning
#*.sof
#*.pof
# report files
#*.rpt
#*.summary

# ignore Quartus generated folders
*/db/
*/incremental_db/
*/timing/
*/testbench/
*/*_sim/
incremental_db/
db/
PLLJ_PLLSPE_INFO.txt

*.zip
*.tmp
#temporary files created by word
~*.docx